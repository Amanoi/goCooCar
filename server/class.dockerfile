ADD file:4974bb5483c392fb54a35f3799802d623d14632747493dce5feb4d435634b4ac in / 
RUN set -xe   && echo '#!/bin/sh' > /usr/sbin/policy-rc.d  && echo 'exit 101' >> /usr/sbin/policy-rc.d  && chmod +x /usr/sbin/policy-rc.d   && dpkg-divert --local --rename --add /sbin/initctl  && cp -a /usr/sbin/policy-rc.d /sbin/initctl  && sed -i 's/^exit.*/exit 0/' /sbin/initctl   && echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/docker-apt-speedup   && echo 'DPkg::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' > /etc/apt/apt.conf.d/docker-clean  && echo 'APT::Update::Post-Invoke { "rm -f /var/cache/apt/archives/*.deb /var/cache/apt/archives/partial/*.deb /var/cache/apt/*.bin || true"; };' >> /etc/apt/apt.conf.d/docker-clean  && echo 'Dir::Cache::pkgcache ""; Dir::Cache::srcpkgcache "";' >> /etc/apt/apt.conf.d/docker-clean   && echo 'Acquire::Languages "none";' > /etc/apt/apt.conf.d/docker-no-languages   && echo 'Acquire::GzipIndexes "true"; Acquire::CompressionTypes::Order:: "gz";' > /etc/apt/apt.conf.d/docker-gzip-indexes   && echo 'Apt::AutoRemove::SuggestsImportant "false";' > /etc/apt/apt.conf.d/docker-autoremove-suggests
RUN [ -z "$(apt-get indextargets)" ]
RUN mkdir -p /run/systemd && echo 'docker' > /run/systemd/container
 CMD ["/bin/bash"]
RUN set -eux;  apt-get update;  apt-get install -y --no-install-recommends   gosu  ;  rm -rf /var/lib/apt/lists/*;  gosu nobody true
 ARG PGP_KEYSERVER=ha.pool.sks-keyservers.net
 ENV OPENSSL_VERSION=1.1.1h
 ENV OPENSSL_SOURCE_SHA256=5c9ca8774bd7b03e5784f26ae9e9e6d749c9da2438545077e6b3d755a06595d9
 ENV OPENSSL_PGP_KEY_IDS=0x8657ABB260F056B1E5190839D9C4D26D0E604491 0x5B2545DAB21995F4088CEFAA36CEE4DEB00CFE33 0xED230BEC4D4F2518B9D7DF41F0DB4D21C1D35231 0xC1F33DD8CE1D4CC613AF14DA9195C48241FBF7DD 0x7953AC1FBC3DC8B3B292393ED5E9E43F7DF9EE8C 0xE5E52560DD91C556DDBDA5D02064C53641C25E5D
 ENV OTP_VERSION=23.1.1
 ENV OTP_SOURCE_SHA256=8094484d94bce21d76f3a6c6137098839e7bc121e170c08b472f980296684ac9
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   autoconf   ca-certificates   dpkg-dev   gcc   gnupg   libncurses5-dev   make   wget  ;  rm -rf /var/lib/apt/lists/*;   OPENSSL_SOURCE_URL="https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz";  OPENSSL_PATH="/usr/local/src/openssl-$OPENSSL_VERSION";  OPENSSL_CONFIG_DIR=/usr/local/etc/ssl;   wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$OPENSSL_PATH.tar.gz" "$OPENSSL_SOURCE_URL";  export GNUPGHOME="$(mktemp -d)";  for key in $OPENSSL_PGP_KEY_IDS; do   gpg --batch --keyserver "$PGP_KEYSERVER" --recv-keys "$key";  done;  gpg --batch --verify "$OPENSSL_PATH.tar.gz.asc" "$OPENSSL_PATH.tar.gz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";  echo "$OPENSSL_SOURCE_SHA256 *$OPENSSL_PATH.tar.gz" | sha256sum --check --strict -;  mkdir -p "$OPENSSL_PATH";  tar --extract --file "$OPENSSL_PATH.tar.gz" --directory "$OPENSSL_PATH" --strip-components 1;   cd "$OPENSSL_PATH";  debMultiarch="$(dpkg-architecture --query DEB_HOST_MULTIARCH)";  MACHINE="$(dpkg-architecture --query DEB_BUILD_GNU_CPU)"  RELEASE="4.x.y-z"  SYSTEM='Linux'  BUILD='???'  ./config   --openssldir="$OPENSSL_CONFIG_DIR"   --libdir="lib/$debMultiarch"   -Wl,-rpath=/usr/local/lib  ;  make -j "$(getconf _NPROCESSORS_ONLN)";  make install_sw install_ssldirs;  cd ..;  rm -rf "$OPENSSL_PATH"*;  ldconfig;  rmdir "$OPENSSL_CONFIG_DIR/certs" "$OPENSSL_CONFIG_DIR/private";  ln -sf /etc/ssl/certs /etc/ssl/private "$OPENSSL_CONFIG_DIR";  openssl version;   OTP_SOURCE_URL="https://github.com/erlang/otp/archive/OTP-$OTP_VERSION.tar.gz";  OTP_PATH="/usr/local/src/otp-$OTP_VERSION";   mkdir -p "$OTP_PATH";  wget --progress dot:giga --output-document "$OTP_PATH.tar.gz" "$OTP_SOURCE_URL";  echo "$OTP_SOURCE_SHA256 *$OTP_PATH.tar.gz" | sha256sum --check --strict -;  tar --extract --file "$OTP_PATH.tar.gz" --directory "$OTP_PATH" --strip-components 1;   cd "$OTP_PATH";  export ERL_TOP="$OTP_PATH";  ./otp_build autoconf;  CFLAGS="$(dpkg-buildflags --get CFLAGS)"; export CFLAGS;  export CFLAGS="$CFLAGS -Wl,-rpath=/usr/local/lib";  hostArch="$(dpkg-architecture --query DEB_HOST_GNU_TYPE)";  buildArch="$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)";  dpkgArch="$(dpkg --print-architecture)"; dpkgArch="${dpkgArch##*-}";  ./configure   --host="$hostArch"   --build="$buildArch"   --disable-dynamic-ssl-lib   --disable-hipe   --disable-sctp   --disable-silent-rules   --enable-clock-gettime   --enable-hybrid-heap   --enable-kernel-poll   --enable-shared-zlib   --enable-smp-support   --enable-threads   --with-microstate-accounting=extra   --without-common_test   --without-debugger   --without-dialyzer   --without-diameter   --without-edoc   --without-erl_docgen   --without-erl_interface   --without-et   --without-eunit   --without-ftp   --without-hipe   --without-jinterface   --without-megaco   --without-observer   --without-odbc   --without-reltool   --without-ssh   --without-tftp   --without-wx  ;  make -j "$(getconf _NPROCESSORS_ONLN)" GEN_OPT_FLGS="-O2 -fno-strict-aliasing";  make install;  cd ..;  rm -rf   "$OTP_PATH"*   /usr/local/lib/erlang/lib/*/examples   /usr/local/lib/erlang/lib/*/src  ;   apt-mark auto '.*' > /dev/null;  [ -z "$savedAptMark" ] || apt-mark manual $savedAptMark;  find /usr/local -type f -executable -exec ldd '{}' ';'   | awk '/=>/ { print $(NF-1) }'   | sort -u   | xargs -r dpkg-query --search   | cut -d: -f1   | sort -u   | xargs -r apt-mark manual  ;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   openssl version;  erl -noshell -eval 'io:format("~p~n~n~p~n~n", [crypto:supports(), ssl:versions()]), init:stop().'
 ENV RABBITMQ_DATA_DIR=/var/lib/rabbitmq
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -eux;  groupadd --gid 999 --system rabbitmq;  useradd --uid 999 --system --home-dir "$RABBITMQ_DATA_DIR" --gid rabbitmq rabbitmq;  mkdir -p "$RABBITMQ_DATA_DIR" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq;  chown -fR rabbitmq:rabbitmq "$RABBITMQ_DATA_DIR" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq;  chmod 777 "$RABBITMQ_DATA_DIR" /etc/rabbitmq /etc/rabbitmq/conf.d /tmp/rabbitmq-ssl /var/log/rabbitmq;  ln -sf "$RABBITMQ_DATA_DIR/.erlang.cookie" /root/.erlang.cookie
 ENV RABBITMQ_VERSION=3.8.9
 ENV RABBITMQ_PGP_KEY_ID=0x0A9AF2115F4687BD29803A206B73A36E6026DFCA
 ENV RABBITMQ_HOME=/opt/rabbitmq
 ENV PATH=/opt/rabbitmq/sbin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin RABBITMQ_LOGS=-
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -eux;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install --yes --no-install-recommends   ca-certificates   gnupg   wget   xz-utils  ;  rm -rf /var/lib/apt/lists/*;   RABBITMQ_SOURCE_URL="https://github.com/rabbitmq/rabbitmq-server/releases/download/v$RABBITMQ_VERSION/rabbitmq-server-generic-unix-latest-toolchain-$RABBITMQ_VERSION.tar.xz";  RABBITMQ_PATH="/usr/local/src/rabbitmq-$RABBITMQ_VERSION";   wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_SOURCE_URL.asc";  wget --progress dot:giga --output-document "$RABBITMQ_PATH.tar.xz" "$RABBITMQ_SOURCE_URL";   export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys "$RABBITMQ_PGP_KEY_ID";  gpg --batch --verify "$RABBITMQ_PATH.tar.xz.asc" "$RABBITMQ_PATH.tar.xz";  gpgconf --kill all;  rm -rf "$GNUPGHOME";   mkdir -p "$RABBITMQ_HOME";  tar --extract --file "$RABBITMQ_PATH.tar.xz" --directory "$RABBITMQ_HOME" --strip-components 1;  rm -rf "$RABBITMQ_PATH"*;  grep -qE '^SYS_PREFIX=\$\{RABBITMQ_HOME\}$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  sed -i 's/^SYS_PREFIX=.*$/SYS_PREFIX=/' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  grep -qE '^SYS_PREFIX=$' "$RABBITMQ_HOME/sbin/rabbitmq-defaults";  chown -R rabbitmq:rabbitmq "$RABBITMQ_HOME";   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   [ ! -e "$RABBITMQ_DATA_DIR/.erlang.cookie" ];  gosu rabbitmq rabbitmqctl help;  gosu rabbitmq rabbitmqctl list_ciphers;  gosu rabbitmq rabbitmq-plugins list;  rm "$RABBITMQ_DATA_DIR/.erlang.cookie"
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -eux;  rabbitmq-plugins enable --offline rabbitmq_prometheus;  echo 'management_agent.disable_metrics_collector = true' > /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN ln -sf /opt/rabbitmq/plugins /plugins
 ENV HOME=/var/lib/rabbitmq
 VOLUME [/var/lib/rabbitmq]
 ENV LANG=C.UTF-8 LANGUAGE=C.UTF-8 LC_ALL=C.UTF-8
 EXPOSE 15691 15692 25672 4369 5671 5672
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN rabbitmq-plugins enable --offline rabbitmq_management
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN rm -f /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -eux;  erl -noinput -eval '   { ok, AdminBin } = zip:foldl(fun(FileInArchive, GetInfo, GetBin, Acc) ->    case Acc of     "" ->      case lists:suffix("/rabbitmqadmin", FileInArchive) of       true -> GetBin();       false -> Acc      end;     _ -> Acc    end   end, "", init:get_plain_arguments()),   io:format("~s", [ AdminBin ]),   init:stop().  ' -- /plugins/rabbitmq_management-*.ez > /usr/local/bin/rabbitmqadmin;  [ -s /usr/local/bin/rabbitmqadmin ];  chmod +x /usr/local/bin/rabbitmqadmin;  apt-get update; apt-get install -y --no-install-recommends python3; rm -rf /var/lib/apt/lists/*;  rabbitmqadmin --version
 EXPOSE 15671 15672
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN groupadd -r mongodb && useradd -r -g mongodb mongodb
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -eux;  apt-get update;  apt-get install -y --no-install-recommends   ca-certificates   jq   numactl  ;  if ! command -v ps > /dev/null; then   apt-get install -y --no-install-recommends procps;  fi;  rm -rf /var/lib/apt/lists/*
 ENV GOSU_VERSION=1.12
 ENV JSYAML_VERSION=3.13.1
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -ex;   savedAptMark="$(apt-mark showmanual)";  apt-get update;  apt-get install -y --no-install-recommends   wget  ;  if ! command -v gpg > /dev/null; then   apt-get install -y --no-install-recommends gnupg dirmngr;   savedAptMark="$savedAptMark gnupg dirmngr";  elif gpg --version | grep -q '^gpg (GnuPG) 1\.'; then   apt-get install -y --no-install-recommends gnupg-curl;  fi;  rm -rf /var/lib/apt/lists/*;   dpkgArch="$(dpkg --print-architecture | awk -F- '{ print $NF }')";  wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch";  wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc";  export GNUPGHOME="$(mktemp -d)";  gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4;  gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME" /usr/local/bin/gosu.asc;   wget -O /js-yaml.js "https://github.com/nodeca/js-yaml/raw/${JSYAML_VERSION}/dist/js-yaml.js";   apt-mark auto '.*' > /dev/null;  apt-mark manual $savedAptMark > /dev/null;  apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false;   chmod +x /usr/local/bin/gosu;  gosu --version;  gosu nobody true
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN mkdir /docker-entrypoint-initdb.d
 ENV GPG_KEYS=20691EEC35216C63CAF66CE1656408E390CFB1F5
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -ex;  export GNUPGHOME="$(mktemp -d)";  for key in $GPG_KEYS; do   gpg --batch --keyserver ha.pool.sks-keyservers.net --recv-keys "$key";  done;  gpg --batch --export $GPG_KEYS > /etc/apt/trusted.gpg.d/mongodb.gpg;  command -v gpgconf && gpgconf --kill all || :;  rm -r "$GNUPGHOME";  apt-key list
 ARG MONGO_PACKAGE=mongodb-org
 ARG MONGO_REPO=repo.mongodb.org
 ENV MONGO_PACKAGE=mongodb-org MONGO_REPO=repo.mongodb.org
 ENV MONGO_MAJOR=4.4
 ENV MONGO_VERSION=4.4.1
 |1PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN echo "deb http://$MONGO_REPO/apt/ubuntu bionic/${MONGO_PACKAGE%-unstable}/$MONGO_MAJOR multiverse" | tee "/etc/apt/sources.list.d/${MONGO_PACKAGE%-unstable}.list"
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN set -x  && export DEBIAN_FRONTEND=noninteractive  && apt-get update  && ln -s /bin/true /usr/local/bin/systemctl  && apt-get install -y   ${MONGO_PACKAGE}=$MONGO_VERSION   ${MONGO_PACKAGE}-server=$MONGO_VERSION   ${MONGO_PACKAGE}-shell=$MONGO_VERSION   ${MONGO_PACKAGE}-mongos=$MONGO_VERSION   ${MONGO_PACKAGE}-tools=$MONGO_VERSION  && rm -f /usr/local/bin/systemctl  && rm -rf /var/lib/apt/lists/*  && rm -rf /var/lib/mongodb  && mv /etc/mongod.conf /etc/mongod.conf.orig
|1 PGP_KEYSERVER=ha.pool.sks-keyservers.net RUN mkdir -p /data/db /data/configdb  && chown -R mongodb:mongodb /data/db /data/configdb
 VOLUME [/data/db /data/configdb]
 EXPOSE 27017
COPY file:f7c42b707147d0f7024bee6d644de06a9f9c35e71681e22d9f9c726d3906c429 in /usr/local/bin/ 
COPY file:913c3b2a0456f6bd6e9b23b209771032c6995c9a460ad1523e432e2d6e7c619f in /usr/local/bin/ 
COPY file:38ac77df12ae8701d15cbd23e99c5da1ecbd8d617a49963e227b2d2e555d2eba in /usr/local/bin/ 
COPY file:b71cdb7a0f1ee29c83c7eb86120a4fe9267fa7b0dfbf355c98bd24e9b60f21f0 in /usr/local/bin/ 
COPY file:999eb7afef5da9723bb98d3cccebfd6e69596273f2a82cc35f418ea7009625a7 in /data/coolenv/ningbo.json 
COPY file:a3795e01151ffd33da18e626891639416117f9084fe5870f026ca48919219823 in /data/coolenv/pb/coolenv.pb.go 
 EXPOSE 18000
 EXPOSE 18001
 ENTRYPOINT ["start.sh"]